{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","CharacterAnimation","props","context","autoBind","node","ReactDOM","findDOMNode","this","fontWidth","getBoundingClientRect","width","HanziWriter","create","character","height","padding","strokeColor","showOutline","delayBetweenLoops","loopCharacterAnimation","style","margin","Component","CharacterStrokeByStrokePractice","target","strokes","svgWidth","Math","floor","svgLink","svg","document","createElementNS","border","marginLeft","appendChild","group","transformData","getScalingTransform","setAttributeNS","transform","forEach","strokePath","path","fill","loadCharacterData","then","charData","i","length","strokesPortion","slice","renderFanningStrokes","quiz","App","chineseCharacter","tabPosition","onChange","changeTab","tab","key","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAMQA,G,UAAAA,SAEFC,E,YACJ,WAAYC,EAAOC,GAAU,IAAD,6BAC1B,4CAAMD,EAAOC,IACbC,IAAS,gBAFiB,E,iFAM1B,IAAMC,EAAOC,IAASC,YAAYC,MAE5BC,EADYJ,EAAKK,wBAAfC,MACkB,GACXC,IAAYC,OAAOR,EAAMG,KAAKN,MAAMY,UAAW,CAC5DH,MAAOF,EACPM,OAAQN,EACRO,QAAS,EACTC,YAAa,UACbC,aAAa,EACbC,kBAAmB,MAEdC,2B,+BAIP,OAAO,yBAAKC,MAAO,CAAEC,OAAQ,c,GAtBAC,aA0B3BC,E,YACJ,WAAYtB,EAAOC,GAAU,IAAD,6BAC1B,4CAAMD,EAAOC,IACbC,IAAS,gBAFiB,E,kFAKPqB,EAAQC,GAAU,IAC7Bf,EAAUc,EAAOf,wBAAjBC,MAEFgB,EAAWC,KAAKC,MAAMlB,EAAQ,EADjB,GAEbmB,EAAU,6BACVC,EAAMC,SAASC,gBAAgBH,EAAS,OAC9CC,EAAIV,MAAMV,MAAV,UAAqBgB,EAArB,MACAI,EAAIV,MAAMN,OAAV,UAAsBY,EAAtB,MACAI,EAAIV,MAAMa,OAAS,iBACnBH,EAAIV,MAAMc,WAAV,UAPmB,EAOnB,MACAV,EAAOW,YAAYL,GACnB,IAAMM,EAAQL,SAASC,gBAAgBH,EAAS,KAG1CQ,EAAgB1B,IAAY2B,oBAAoBZ,EAAUA,GAChEU,EAAMG,eAAe,KAAM,YAAaF,EAAcG,WACtDV,EAAIK,YAAYC,GAEhBX,EAAQgB,SAAQ,SAAAC,GACd,IAAMC,EAAOZ,SAASC,gBAAgBH,EAAS,QAC/Cc,EAAKJ,eAAe,KAAM,IAAKG,GAC/BC,EAAKvB,MAAMwB,KAAO,OAClBR,EAAMD,YAAYQ,Q,0CAID,IAAD,OACZvC,EAAOC,IAASC,YAAYC,MAE5BC,EADYJ,EAAKK,wBAAfC,MACkB,GAE1BC,IAAYkC,kBAAkBtC,KAAKN,MAAMY,WAAWiC,MAAK,SAAAC,GACvD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAStB,QAAQwB,OAAQD,IAAK,CAChD,IAAME,EAAiBH,EAAStB,QAAQ0B,MAAM,EAAGH,EAAI,GACrD,EAAKI,qBAAqBhD,EAAM8C,GAGnBvC,IAAYC,OAAOR,EAAM,EAAKH,MAAMY,UAAW,CAC5DH,MAAOF,EACPM,OAAQN,EACRO,QAAS,IAEJsC,Y,+BAKT,OAAO,kC,GArDmC/B,aAkF/BgC,E,YAxBb,WAAYrD,EAAOC,GAAU,IAAD,6BAC1B,4CAAMD,EAAOC,IACbC,IAAS,gBACT,EAAKoD,iBAAmB,SAHE,E,sEAO1B,OACE,kBAAC,WAAD,KACE,uBAAMC,YAAY,QAAQC,SAAUlD,KAAKmD,WACvC,kBAAC3D,EAAD,CAAS4D,IAAI,2BAAOC,IAAI,KACtB,kBAAC,EAAD,CAAoB/C,UAAWN,KAAKgD,oBAEtC,kBAACxD,EAAD,CAAS4D,IAAI,2BAAOC,IAAI,KACtB,kBAAC,EAAD,CACE/C,UAAWN,KAAKgD,0B,GAhBZjC,aC/EEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN5D,IAAS6D,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.29f7ab7f.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport autoBind from \"react-autobind\";\r\nimport HanziWriter from \"hanzi-writer\";\r\nimport { Tabs } from \"antd\";\r\nimport \"./App.css\";\r\nconst { TabPane } = Tabs;\r\n\r\nclass CharacterAnimation extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    const { width } = node.getBoundingClientRect();\r\n    const fontWidth = width - 10;\r\n    const writer = HanziWriter.create(node, this.props.character, {\r\n      width: fontWidth,\r\n      height: fontWidth,\r\n      padding: 0,\r\n      strokeColor: \"#168F16\",\r\n      showOutline: true,\r\n      delayBetweenLoops: 1000\r\n    });\r\n    writer.loopCharacterAnimation();\r\n  }\r\n\r\n  render() {\r\n    return <div style={{ margin: \"auto\" }} />;\r\n  }\r\n}\r\n\r\nclass CharacterStrokeByStrokePractice extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n  }\r\n\r\n  renderFanningStrokes(target, strokes) {\r\n    const { width } = target.getBoundingClientRect();\r\n    const marginLeft = 3;\r\n    const svgWidth = Math.floor(width / 5 - marginLeft);\r\n    const svgLink = \"http://www.w3.org/2000/svg\";\r\n    const svg = document.createElementNS(svgLink, \"svg\");\r\n    svg.style.width = `${svgWidth}px`;\r\n    svg.style.height = `${svgWidth}px`;\r\n    svg.style.border = \"1px solid #EEE\";\r\n    svg.style.marginLeft = `${marginLeft}px`;\r\n    target.appendChild(svg);\r\n    const group = document.createElementNS(svgLink, \"g\");\r\n\r\n    // set the transform property on the g element so the character renders at 75x75\r\n    const transformData = HanziWriter.getScalingTransform(svgWidth, svgWidth);\r\n    group.setAttributeNS(null, \"transform\", transformData.transform);\r\n    svg.appendChild(group);\r\n\r\n    strokes.forEach(strokePath => {\r\n      const path = document.createElementNS(svgLink, \"path\");\r\n      path.setAttributeNS(null, \"d\", strokePath);\r\n      path.style.fill = \"#555\"; // style the character paths\r\n      group.appendChild(path);\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    const { width } = node.getBoundingClientRect();\r\n    const fontWidth = width - 10;\r\n\r\n    HanziWriter.loadCharacterData(this.props.character).then(charData => {\r\n      for (let i = 0; i < charData.strokes.length; i++) {\r\n        const strokesPortion = charData.strokes.slice(0, i + 1);\r\n        this.renderFanningStrokes(node, strokesPortion);\r\n      }\r\n\r\n      const writer = HanziWriter.create(node, this.props.character, {\r\n        width: fontWidth,\r\n        height: fontWidth,\r\n        padding: 0\r\n      });\r\n      writer.quiz();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n    this.chineseCharacter = \"汉\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Tabs tabPosition=\"right\" onChange={this.changeTab}>\r\n          <TabPane tab=\"笔顺动画\" key=\"1\">\r\n            <CharacterAnimation character={this.chineseCharacter} />\r\n          </TabPane>\r\n          <TabPane tab=\"描写练习\" key=\"3\">\r\n            <CharacterStrokeByStrokePractice\r\n              character={this.chineseCharacter}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}