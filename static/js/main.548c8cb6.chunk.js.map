{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","CharacterAnimation","props","context","autoBind","writer","node","ReactDOM","findDOMNode","this","fontWidth","getBoundingClientRect","width","HanziWriter","create","character","height","padding","strokeColor","showOutline","delayBetweenLoops","loopCharacterAnimation","setCharacter","style","margin","maxWidth","Component","CharacterStrokeByStrokePractice","target","strokes","svgWidth","Math","floor","svgLink","svg","document","createElementNS","border","marginLeft","appendChild","group","transformData","getScalingTransform","setAttributeNS","transform","forEach","strokePath","idx","path","length","fill","loadCharacterData","then","charData","firstChild","remove","i","strokesPortion","slice","renderFanningStrokes","quiz","paintCharacter","App","runner","characters","state","charIdx","setInterval","setState","clearInterval","tabPosition","tab","key","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.548c8cb6.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport autoBind from \"react-autobind\";\r\nimport HanziWriter from \"hanzi-writer\";\r\nimport { Tabs } from \"antd\";\r\nimport \"./App.css\";\r\nconst { TabPane } = Tabs;\r\n\r\nclass CharacterAnimation extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n    this.writer = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    const { width } = node.getBoundingClientRect();\r\n    const fontWidth = width - 10;\r\n    this.writer = HanziWriter.create(node, this.props.character, {\r\n      width: fontWidth,\r\n      height: fontWidth,\r\n      padding: 0,\r\n      strokeColor: \"#168F16\",\r\n      showOutline: true,\r\n      delayBetweenLoops: 1000\r\n    });\r\n    this.writer.loopCharacterAnimation();\r\n  }\r\n\r\n  render() {\r\n    const { character } = this.props;\r\n    if (this.writer !== null) {\r\n      this.writer.setCharacter(character);\r\n      this.writer.loopCharacterAnimation();\r\n    }\r\n    return <div style={{ margin: \"0 auto\", maxWidth: 500 }} />;\r\n  }\r\n}\r\n\r\nclass CharacterStrokeByStrokePractice extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n    this.node = null;\r\n    this.fontWidth = null;\r\n  }\r\n\r\n  renderFanningStrokes(target, strokes) {\r\n    const { width } = target.getBoundingClientRect();\r\n    const marginLeft = 3;\r\n    const svgWidth = Math.floor(width / 5 - marginLeft);\r\n    const svgLink = \"http://www.w3.org/2000/svg\";\r\n    const svg = document.createElementNS(svgLink, \"svg\");\r\n    svg.style.width = `${svgWidth}px`;\r\n    svg.style.height = `${svgWidth}px`;\r\n    svg.style.border = \"1px solid #EEE\";\r\n    svg.style.marginLeft = `${marginLeft}px`;\r\n    target.appendChild(svg);\r\n    const group = document.createElementNS(svgLink, \"g\");\r\n\r\n    // set the transform property on the g element so the character renders at 75x75\r\n    const transformData = HanziWriter.getScalingTransform(svgWidth, svgWidth);\r\n    group.setAttributeNS(null, \"transform\", transformData.transform);\r\n    svg.appendChild(group);\r\n\r\n    strokes.forEach((strokePath, idx) => {\r\n      const path = document.createElementNS(svgLink, \"path\");\r\n      path.setAttributeNS(null, \"d\", strokePath);\r\n      if (idx < strokes.length - 1) {\r\n        path.style.fill = \"#555\"; // style the character paths\r\n      } else {\r\n        path.style.fill = \"green\";\r\n      }\r\n      group.appendChild(path);\r\n    });\r\n  }\r\n\r\n  paintCharacter(node, fontWidth, character) {\r\n    HanziWriter.loadCharacterData(character).then(charData => {\r\n      while (node.firstChild) {\r\n        node.firstChild.remove();\r\n      }\r\n\r\n      for (let i = 0; i < charData.strokes.length; i++) {\r\n        const strokesPortion = charData.strokes.slice(0, i + 1);\r\n        this.renderFanningStrokes(node, strokesPortion);\r\n      }\r\n\r\n      const writer = HanziWriter.create(node, character, {\r\n        width: fontWidth,\r\n        height: fontWidth,\r\n        padding: 0\r\n      });\r\n      writer.quiz();\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    const { width } = node.getBoundingClientRect();\r\n    const fontWidth = width - 10;\r\n    this.node = node;\r\n    this.fontWidth = fontWidth;\r\n    this.paintCharacter(node, fontWidth, this.props.character);\r\n  }\r\n\r\n  render() {\r\n    const { character } = this.props;\r\n    if (this.node !== null && this.fontWidth !== null) {\r\n      this.paintCharacter(this.node, this.fontWidth, character);\r\n    }\r\n\r\n    return <div style={{ margin: \"0 auto\", maxWidth: 500 }} />;\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    autoBind(this);\r\n    this.runner = null;\r\n    this.characters = [\"我\", \"要\", \"学\", \"汉\", \"语\"];\r\n    this.state = { charIdx: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.runner = setInterval(() => {\r\n      const charIdx =\r\n        this.state.charIdx === this.characters.length - 1\r\n          ? 0\r\n          : this.state.charIdx + 1;\r\n      this.setState({ charIdx });\r\n    }, 30000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.runner);\r\n  }\r\n\r\n  render() {\r\n    const { charIdx } = this.state;\r\n    const character = this.characters[charIdx];\r\n\r\n    return (\r\n      <Fragment>\r\n        <Tabs tabPosition=\"right\">\r\n          <TabPane\r\n            tab={\r\n              <div>\r\n                <span>笔 顺 动 画</span>\r\n                <br />\r\n                <span>Stroke Animation</span>\r\n              </div>\r\n            }\r\n            key=\"1\"\r\n          >\r\n            <CharacterAnimation character={character} />\r\n          </TabPane>\r\n          <TabPane\r\n            tab={\r\n              <div>\r\n                <span>描 写 练 习</span>\r\n                <br />\r\n                <span>Stroke Practice</span>\r\n              </div>\r\n            }\r\n            key=\"2\"\r\n          >\r\n            <CharacterStrokeByStrokePractice character={character} />\r\n          </TabPane>\r\n        </Tabs>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}